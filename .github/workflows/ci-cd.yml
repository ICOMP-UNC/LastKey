name: CI/CD Pipeline for STM32 (PlatformIO + Clang-Format + Doxygen Verification)

on:
  push:
    branches:
      - test
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar PlatformIO
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install platformio

      # Paso 3: Instalar dependencias y compilar el proyecto
      - name: Build project
        run: platformio run --project-dir TP_Final/

  check-format:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Verificar formato del código con Clang-Format
      - name: Verify Clang-Format Compliance
        run: |
          sudo apt-get install -y clang-format
          clang-format --style=file --dry-run --Werror TP_Final/src/*.c

  check-doxygen:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: "Set up Graphviz"
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz
          
      - name: "Install Doxygen"
        run: |
          sudo apt-get install -y doxygen
          
      - name: "Verify directory structure"
        run: |
          ls -R /home/runner/work/LastKey/TP_Final/src
          
      - name: "Run doxygen command"
        shell: bash
        run: |
          # We only make check, not changes
          DOX_CONF_FILE=$(pwd)/Doxyfile
      
          # Añadir las rutas correctas de los directorios dentro de TP_Final
          echo "INPUT = $(pwd)/TP_Final/src/main.c" >> $DOX_CONF_FILE
      
          # Generar la documentación
          sudo dot -c
      
          ERROR_FILE_FLAG=$(pwd)/dox_errors.txt
      
          # Crear documentación: -s omite comentarios de los ítems de configuración.
          DOXYGEN_COMMAND=$(doxygen -s $DOX_CONF_FILE 2> $ERROR_FILE_FLAG)
      
          # Si el archivo de errores no está vacío, fallar
          if [ -s $ERROR_FILE_FLAG ]; then
            echo "Error: There are some files that are not documented correctly"
            exit 1
          else
            echo "All files are documented correctly. Niiiceee"
            exit 0
          fi

      # Upload errors as an artifact, when failed
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Doxygen errors!!!
          path: ./dox_errors.txt
          retention-days: 1
